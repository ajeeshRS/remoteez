// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobSeeker {
  id                String            @id @unique @default(uuid())
  email             String            @unique
  fullName          String
  password          String?
  avatar            String?
  bio               String?
  githubLink        String?
  portfolioLink     String?
  linkedinLink      String?
  twitterLink       String?
  skills            String[]
  projects          Project[]
  resume            String?
  desiredJobTitle   String?
  experienceRange   ExperienceRange?
  previousCompanies PreviousCompany[]
  location          String?
  preferredJobType  JobType?
  Bookmark          Bookmark[]
}

model Project {
  id           String    @id @unique @default(uuid())
  jobSeekerId  String
  title        String    @unique
  githubURL    String?
  deployedLink String
  description  String
  skills       String[]
  jobSeeker    JobSeeker @relation(fields: [jobSeekerId], references: [id])
}

model PreviousCompany {
  id             String    @id @unique @default(uuid())
  jobSeekerId    String
  role           String
  jobType        JobType
  companyName    String
  companyWebsite String?
  duration       String
  jobSeeker      JobSeeker @relation(fields: [jobSeekerId], references: [id])
}

enum ExperienceRange {
  ZERO_TO_ONE
  ONE_TO_THREE
  THREE_TO_SIX
  SIX_PLUS
}

enum JobType {
  PART_TIME
  FULL_TIME
  FREELANCE
  INTERNSHIP
}

model Employer {
  id              String       @id @unique @default(uuid())
  name            String
  companyName     String?
  companyLocation String?
  role            Role?
  password        String?
  email           String       @unique
  logo            String?
  foundedYear     Int?
  teamSize        Int?
  socialLinks     SocialLinks?
  description     String?
  jobs            Job[]
}

enum Role {
  HR
  CEO
  FOUNDER
}

model SocialLinks {
  id         String   @id @unique @default(uuid())
  employerId String   @unique
  twitter    String?
  linkedin   String?
  website    String?
  employer   Employer @relation(fields: [employerId], references: [id])
}

model Job {
  id                 String     @id @unique @default(uuid())
  employerId         String
  title              String
  jobType            JobType
  minExperience      Int
  maxExperience      Int
  description        String
  companyName        String
  companyLogo        String
  companyDescription String
  companyEmail       String
  skillsRequired     String[]
  minSalary          Int
  maxSalary          Int
  currency           Currency   @default(INR)
  isVerified         Boolean    @default(false)
  postedAt           DateTime   @default(now())
  link               String
  updatedAt          DateTime   @updatedAt
  employer           Employer   @relation(fields: [employerId], references: [id])
  bookmark           Bookmark[]
  Applied            Applied[]
}

model Applied {
  id          String @id @default(uuid())
  jobSeekerId String @unique
  jobId       String
  job         Job    @relation(fields: [jobId], references: [id])
}

model Bookmark {
  id          String    @id @default(uuid())
  jobId       String
  jobSeekerId String
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
  job         Job       @relation(fields: [jobId], references: [id])
}

enum Currency {
  INR
  USD
}

model ResetToken {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String
  expiresAt DateTime
}
